// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Game is an object representing the database table.
type Game struct {
	ID      int         `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	Name    null.String `boil:"Name" json:"Name,omitempty" toml:"Name" yaml:"Name,omitempty"`
	ModelId null.Int    `boil:"ModelId" json:"ModelId,omitempty" toml:"ModelId" yaml:"ModelId,omitempty"`
	Date    null.Time   `boil:"Date" json:"Date,omitempty" toml:"Date" yaml:"Date,omitempty"`

	R *gameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameColumns = struct {
	ID      string
	Name    string
	ModelId string
	Date    string
}{
	ID:      "Id",
	Name:    "Name",
	ModelId: "ModelId",
	Date:    "Date",
}

var GameTableColumns = struct {
	ID      string
	Name    string
	ModelId string
	Date    string
}{
	ID:      "Game.Id",
	Name:    "Game.Name",
	ModelId: "Game.ModelId",
	Date:    "Game.Date",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GameWhere = struct {
	ID      whereHelperint
	Name    whereHelpernull_String
	ModelId whereHelpernull_Int
	Date    whereHelpernull_Time
}{
	ID:      whereHelperint{field: "`Game`.`Id`"},
	Name:    whereHelpernull_String{field: "`Game`.`Name`"},
	ModelId: whereHelpernull_Int{field: "`Game`.`ModelId`"},
	Date:    whereHelpernull_Time{field: "`Game`.`Date`"},
}

// GameRels is where relationship names are stored.
var GameRels = struct {
	ModelIdModel         string
	GameIdPlayers        string
	GameIdUserStatistics string
}{
	ModelIdModel:         "ModelIdModel",
	GameIdPlayers:        "GameIdPlayers",
	GameIdUserStatistics: "GameIdUserStatistics",
}

// gameR is where relationships are stored.
type gameR struct {
	ModelIdModel         *Model             `boil:"ModelIdModel" json:"ModelIdModel" toml:"ModelIdModel" yaml:"ModelIdModel"`
	GameIdPlayers        PlayerSlice        `boil:"GameIdPlayers" json:"GameIdPlayers" toml:"GameIdPlayers" yaml:"GameIdPlayers"`
	GameIdUserStatistics UserStatisticSlice `boil:"GameIdUserStatistics" json:"GameIdUserStatistics" toml:"GameIdUserStatistics" yaml:"GameIdUserStatistics"`
}

// NewStruct creates a new relationship struct
func (*gameR) NewStruct() *gameR {
	return &gameR{}
}

func (r *gameR) GetModelIdModel() *Model {
	if r == nil {
		return nil
	}
	return r.ModelIdModel
}

func (r *gameR) GetGameIdPlayers() PlayerSlice {
	if r == nil {
		return nil
	}
	return r.GameIdPlayers
}

func (r *gameR) GetGameIdUserStatistics() UserStatisticSlice {
	if r == nil {
		return nil
	}
	return r.GameIdUserStatistics
}

// gameL is where Load methods for each relationship are stored.
type gameL struct{}

var (
	gameAllColumns            = []string{"Id", "Name", "ModelId", "Date"}
	gameColumnsWithoutDefault = []string{"Name", "ModelId", "Date"}
	gameColumnsWithDefault    = []string{"Id"}
	gamePrimaryKeyColumns     = []string{"Id"}
	gameGeneratedColumns      = []string{}
)

type (
	// GameSlice is an alias for a slice of pointers to Game.
	// This should almost always be used instead of []Game.
	GameSlice []*Game
	// GameHook is the signature for custom Game hook methods
	GameHook func(context.Context, boil.ContextExecutor, *Game) error

	gameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameType                 = reflect.TypeOf(&Game{})
	gameMapping              = queries.MakeStructMapping(gameType)
	gamePrimaryKeyMapping, _ = queries.BindMapping(gameType, gameMapping, gamePrimaryKeyColumns)
	gameInsertCacheMut       sync.RWMutex
	gameInsertCache          = make(map[string]insertCache)
	gameUpdateCacheMut       sync.RWMutex
	gameUpdateCache          = make(map[string]updateCache)
	gameUpsertCacheMut       sync.RWMutex
	gameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gameAfterSelectHooks []GameHook

var gameBeforeInsertHooks []GameHook
var gameAfterInsertHooks []GameHook

var gameBeforeUpdateHooks []GameHook
var gameAfterUpdateHooks []GameHook

var gameBeforeDeleteHooks []GameHook
var gameAfterDeleteHooks []GameHook

var gameBeforeUpsertHooks []GameHook
var gameAfterUpsertHooks []GameHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Game) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Game) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Game) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Game) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Game) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Game) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Game) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Game) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Game) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGameHook registers your hook function for all future operations.
func AddGameHook(hookPoint boil.HookPoint, gameHook GameHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gameAfterSelectHooks = append(gameAfterSelectHooks, gameHook)
	case boil.BeforeInsertHook:
		gameBeforeInsertHooks = append(gameBeforeInsertHooks, gameHook)
	case boil.AfterInsertHook:
		gameAfterInsertHooks = append(gameAfterInsertHooks, gameHook)
	case boil.BeforeUpdateHook:
		gameBeforeUpdateHooks = append(gameBeforeUpdateHooks, gameHook)
	case boil.AfterUpdateHook:
		gameAfterUpdateHooks = append(gameAfterUpdateHooks, gameHook)
	case boil.BeforeDeleteHook:
		gameBeforeDeleteHooks = append(gameBeforeDeleteHooks, gameHook)
	case boil.AfterDeleteHook:
		gameAfterDeleteHooks = append(gameAfterDeleteHooks, gameHook)
	case boil.BeforeUpsertHook:
		gameBeforeUpsertHooks = append(gameBeforeUpsertHooks, gameHook)
	case boil.AfterUpsertHook:
		gameAfterUpsertHooks = append(gameAfterUpsertHooks, gameHook)
	}
}

// One returns a single game record from the query.
func (q gameQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Game, error) {
	o := &Game{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Game")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Game records from the query.
func (q gameQuery) All(ctx context.Context, exec boil.ContextExecutor) (GameSlice, error) {
	var o []*Game

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Game slice")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Game records in the query.
func (q gameQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Game rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Game exists")
	}

	return count > 0, nil
}

// ModelIdModel pointed to by the foreign key.
func (o *Game) ModelIdModel(mods ...qm.QueryMod) modelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Id` = ?", o.ModelId),
	}

	queryMods = append(queryMods, mods...)

	return Models(queryMods...)
}

// GameIdPlayers retrieves all the Player's Players with an executor via GameId column.
func (o *Game) GameIdPlayers(mods ...qm.QueryMod) playerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Player`.`GameId`=?", o.ID),
	)

	return Players(queryMods...)
}

// GameIdUserStatistics retrieves all the UserStatistic's UserStatistics with an executor via GameId column.
func (o *Game) GameIdUserStatistics(mods ...qm.QueryMod) userStatisticQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`UserStatistics`.`GameId`=?", o.ID),
	)

	return UserStatistics(queryMods...)
}

// LoadModelIdModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameL) LoadModelIdModel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		if !queries.IsNil(object.ModelId) {
			args = append(args, object.ModelId)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ModelId) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ModelId) {
				args = append(args, obj.ModelId)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Model`),
		qm.WhereIn(`Model.Id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Model")
	}

	var resultSlice []*Model
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Model")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Model")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Model")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ModelIdModel = foreign
		if foreign.R == nil {
			foreign.R = &modelR{}
		}
		foreign.R.ModelIdGames = append(foreign.R.ModelIdGames, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ModelId, foreign.ID) {
				local.R.ModelIdModel = foreign
				if foreign.R == nil {
					foreign.R = &modelR{}
				}
				foreign.R.ModelIdGames = append(foreign.R.ModelIdGames, local)
				break
			}
		}
	}

	return nil
}

// LoadGameIdPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameL) LoadGameIdPlayers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Player`),
		qm.WhereIn(`Player.GameId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Player")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Player")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GameIdPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerR{}
			}
			foreign.R.GameIdGame = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GameId) {
				local.R.GameIdPlayers = append(local.R.GameIdPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.GameIdGame = local
				break
			}
		}
	}

	return nil
}

// LoadGameIdUserStatistics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gameL) LoadGameIdUserStatistics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGame interface{}, mods queries.Applicator) error {
	var slice []*Game
	var object *Game

	if singular {
		var ok bool
		object, ok = maybeGame.(*Game)
		if !ok {
			object = new(Game)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGame))
			}
		}
	} else {
		s, ok := maybeGame.(*[]*Game)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGame)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGame))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gameR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`UserStatistics`),
		qm.WhereIn(`UserStatistics.GameId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserStatistics")
	}

	var resultSlice []*UserStatistic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserStatistics")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on UserStatistics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for UserStatistics")
	}

	if len(userStatisticAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GameIdUserStatistics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userStatisticR{}
			}
			foreign.R.GameIdGame = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GameId) {
				local.R.GameIdUserStatistics = append(local.R.GameIdUserStatistics, foreign)
				if foreign.R == nil {
					foreign.R = &userStatisticR{}
				}
				foreign.R.GameIdGame = local
				break
			}
		}
	}

	return nil
}

// SetModelIdModel of the game to the related item.
// Sets o.R.ModelIdModel to related.
// Adds o to related.R.ModelIdGames.
func (o *Game) SetModelIdModel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Model) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Game` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ModelId"}),
		strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ModelId, related.ID)
	if o.R == nil {
		o.R = &gameR{
			ModelIdModel: related,
		}
	} else {
		o.R.ModelIdModel = related
	}

	if related.R == nil {
		related.R = &modelR{
			ModelIdGames: GameSlice{o},
		}
	} else {
		related.R.ModelIdGames = append(related.R.ModelIdGames, o)
	}

	return nil
}

// RemoveModelIdModel relationship.
// Sets o.R.ModelIdModel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Game) RemoveModelIdModel(ctx context.Context, exec boil.ContextExecutor, related *Model) error {
	var err error

	queries.SetScanner(&o.ModelId, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("ModelId")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ModelIdModel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ModelIdGames {
		if queries.Equal(o.ModelId, ri.ModelId) {
			continue
		}

		ln := len(related.R.ModelIdGames)
		if ln > 1 && i < ln-1 {
			related.R.ModelIdGames[i] = related.R.ModelIdGames[ln-1]
		}
		related.R.ModelIdGames = related.R.ModelIdGames[:ln-1]
		break
	}
	return nil
}

// AddGameIdPlayers adds the given related objects to the existing relationships
// of the Game, optionally inserting them as new records.
// Appends related to o.R.GameIdPlayers.
// Sets related.R.GameIdGame appropriately.
func (o *Game) AddGameIdPlayers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Player) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GameId, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Player` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"GameId"}),
				strmangle.WhereClause("`", "`", 0, playerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GameId, o.ID)
		}
	}

	if o.R == nil {
		o.R = &gameR{
			GameIdPlayers: related,
		}
	} else {
		o.R.GameIdPlayers = append(o.R.GameIdPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerR{
				GameIdGame: o,
			}
		} else {
			rel.R.GameIdGame = o
		}
	}
	return nil
}

// SetGameIdPlayers removes all previously related items of the
// Game replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GameIdGame's GameIdPlayers accordingly.
// Replaces o.R.GameIdPlayers with related.
// Sets related.R.GameIdGame's GameIdPlayers accordingly.
func (o *Game) SetGameIdPlayers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Player) error {
	query := "update `Player` set `GameId` = null where `GameId` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GameIdPlayers {
			queries.SetScanner(&rel.GameId, nil)
			if rel.R == nil {
				continue
			}

			rel.R.GameIdGame = nil
		}
		o.R.GameIdPlayers = nil
	}

	return o.AddGameIdPlayers(ctx, exec, insert, related...)
}

// RemoveGameIdPlayers relationships from objects passed in.
// Removes related items from R.GameIdPlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.GameIdGame.
func (o *Game) RemoveGameIdPlayers(ctx context.Context, exec boil.ContextExecutor, related ...*Player) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GameId, nil)
		if rel.R != nil {
			rel.R.GameIdGame = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("GameId")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GameIdPlayers {
			if rel != ri {
				continue
			}

			ln := len(o.R.GameIdPlayers)
			if ln > 1 && i < ln-1 {
				o.R.GameIdPlayers[i] = o.R.GameIdPlayers[ln-1]
			}
			o.R.GameIdPlayers = o.R.GameIdPlayers[:ln-1]
			break
		}
	}

	return nil
}

// AddGameIdUserStatistics adds the given related objects to the existing relationships
// of the Game, optionally inserting them as new records.
// Appends related to o.R.GameIdUserStatistics.
// Sets related.R.GameIdGame appropriately.
func (o *Game) AddGameIdUserStatistics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserStatistic) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GameId, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `UserStatistics` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"GameId"}),
				strmangle.WhereClause("`", "`", 0, userStatisticPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GameId, o.ID)
		}
	}

	if o.R == nil {
		o.R = &gameR{
			GameIdUserStatistics: related,
		}
	} else {
		o.R.GameIdUserStatistics = append(o.R.GameIdUserStatistics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userStatisticR{
				GameIdGame: o,
			}
		} else {
			rel.R.GameIdGame = o
		}
	}
	return nil
}

// SetGameIdUserStatistics removes all previously related items of the
// Game replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GameIdGame's GameIdUserStatistics accordingly.
// Replaces o.R.GameIdUserStatistics with related.
// Sets related.R.GameIdGame's GameIdUserStatistics accordingly.
func (o *Game) SetGameIdUserStatistics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserStatistic) error {
	query := "update `UserStatistics` set `GameId` = null where `GameId` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GameIdUserStatistics {
			queries.SetScanner(&rel.GameId, nil)
			if rel.R == nil {
				continue
			}

			rel.R.GameIdGame = nil
		}
		o.R.GameIdUserStatistics = nil
	}

	return o.AddGameIdUserStatistics(ctx, exec, insert, related...)
}

// RemoveGameIdUserStatistics relationships from objects passed in.
// Removes related items from R.GameIdUserStatistics (uses pointer comparison, removal does not keep order)
// Sets related.R.GameIdGame.
func (o *Game) RemoveGameIdUserStatistics(ctx context.Context, exec boil.ContextExecutor, related ...*UserStatistic) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GameId, nil)
		if rel.R != nil {
			rel.R.GameIdGame = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("GameId")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GameIdUserStatistics {
			if rel != ri {
				continue
			}

			ln := len(o.R.GameIdUserStatistics)
			if ln > 1 && i < ln-1 {
				o.R.GameIdUserStatistics[i] = o.R.GameIdUserStatistics[ln-1]
			}
			o.R.GameIdUserStatistics = o.R.GameIdUserStatistics[:ln-1]
			break
		}
	}

	return nil
}

// Games retrieves all the records using an executor.
func Games(mods ...qm.QueryMod) gameQuery {
	mods = append(mods, qm.From("`Game`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`Game`.*"})
	}

	return gameQuery{q}
}

// FindGame retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGame(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Game, error) {
	gameObj := &Game{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Game` where `Id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, gameObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Game")
	}

	if err = gameObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gameObj, err
	}

	return gameObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Game) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Game provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameInsertCacheMut.RLock()
	cache, cached := gameInsertCache[key]
	gameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameAllColumns,
			gameColumnsWithDefault,
			gameColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameType, gameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Game` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Game` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Game` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Game")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == gameMapping["Id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Game")
	}

CacheNoHooks:
	if !cached {
		gameInsertCacheMut.Lock()
		gameInsertCache[key] = cache
		gameInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Game.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Game) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gameUpdateCacheMut.RLock()
	cache, cached := gameUpdateCache[key]
	gameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameAllColumns,
			gamePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Game, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Game` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, append(wl, gamePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Game row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Game")
	}

	if !cached {
		gameUpdateCacheMut.Lock()
		gameUpdateCache[key] = cache
		gameUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gameQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Game")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Game")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Game` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gamePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in game slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all game")
	}
	return rowsAff, nil
}

var mySQLGameUniqueColumns = []string{
	"Id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Game) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Game provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGameUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameUpsertCacheMut.RLock()
	cache, cached := gameUpsertCache[key]
	gameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gameAllColumns,
			gameColumnsWithDefault,
			gameColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gameAllColumns,
			gamePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert Game, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`Game`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Game` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(gameType, gameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameType, gameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Game")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == gameMapping["Id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(gameType, gameMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Game")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Game")
	}

CacheNoHooks:
	if !cached {
		gameUpsertCacheMut.Lock()
		gameUpsertCache[key] = cache
		gameUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Game record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Game) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Game provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gamePrimaryKeyMapping)
	sql := "DELETE FROM `Game` WHERE `Id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Game")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Game")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Game")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Game")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gameBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Game` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gamePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from game slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Game")
	}

	if len(gameAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Game) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGame(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Game`.* FROM `Game` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gamePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GameSlice")
	}

	*o = slice

	return nil
}

// GameExists checks if the Game row exists.
func GameExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Game` where `Id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Game exists")
	}

	return exists, nil
}
