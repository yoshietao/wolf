// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserStatistic is an object representing the database table.
type UserStatistic struct {
	ID          int         `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	UserId      null.Int    `boil:"UserId" json:"UserId,omitempty" toml:"UserId" yaml:"UserId,omitempty"`
	GameId      null.Int    `boil:"GameId" json:"GameId,omitempty" toml:"GameId" yaml:"GameId,omitempty"`
	Date        null.Time   `boil:"Date" json:"Date,omitempty" toml:"Date" yaml:"Date,omitempty"`
	SeatId      null.Int    `boil:"SeatId" json:"SeatId,omitempty" toml:"SeatId" yaml:"SeatId,omitempty"`
	CharacterId null.Int    `boil:"CharacterId" json:"CharacterId,omitempty" toml:"CharacterId" yaml:"CharacterId,omitempty"`
	Result      null.String `boil:"Result" json:"Result,omitempty" toml:"Result" yaml:"Result,omitempty"`

	R *userStatisticR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userStatisticL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserStatisticColumns = struct {
	ID          string
	UserId      string
	GameId      string
	Date        string
	SeatId      string
	CharacterId string
	Result      string
}{
	ID:          "Id",
	UserId:      "UserId",
	GameId:      "GameId",
	Date:        "Date",
	SeatId:      "SeatId",
	CharacterId: "CharacterId",
	Result:      "Result",
}

var UserStatisticTableColumns = struct {
	ID          string
	UserId      string
	GameId      string
	Date        string
	SeatId      string
	CharacterId string
	Result      string
}{
	ID:          "UserStatistics.Id",
	UserId:      "UserStatistics.UserId",
	GameId:      "UserStatistics.GameId",
	Date:        "UserStatistics.Date",
	SeatId:      "UserStatistics.SeatId",
	CharacterId: "UserStatistics.CharacterId",
	Result:      "UserStatistics.Result",
}

// Generated where

var UserStatisticWhere = struct {
	ID          whereHelperint
	UserId      whereHelpernull_Int
	GameId      whereHelpernull_Int
	Date        whereHelpernull_Time
	SeatId      whereHelpernull_Int
	CharacterId whereHelpernull_Int
	Result      whereHelpernull_String
}{
	ID:          whereHelperint{field: "`UserStatistics`.`Id`"},
	UserId:      whereHelpernull_Int{field: "`UserStatistics`.`UserId`"},
	GameId:      whereHelpernull_Int{field: "`UserStatistics`.`GameId`"},
	Date:        whereHelpernull_Time{field: "`UserStatistics`.`Date`"},
	SeatId:      whereHelpernull_Int{field: "`UserStatistics`.`SeatId`"},
	CharacterId: whereHelpernull_Int{field: "`UserStatistics`.`CharacterId`"},
	Result:      whereHelpernull_String{field: "`UserStatistics`.`Result`"},
}

// UserStatisticRels is where relationship names are stored.
var UserStatisticRels = struct {
	UserIdUser            string
	CharacterIdCharacterR string
	GameIdGame            string
}{
	UserIdUser:            "UserIdUser",
	CharacterIdCharacterR: "CharacterIdCharacterR",
	GameIdGame:            "GameIdGame",
}

// userStatisticR is where relationships are stored.
type userStatisticR struct {
	UserIdUser            *User       `boil:"UserIdUser" json:"UserIdUser" toml:"UserIdUser" yaml:"UserIdUser"`
	CharacterIdCharacterR *CharacterR `boil:"CharacterIdCharacterR" json:"CharacterIdCharacterR" toml:"CharacterIdCharacterR" yaml:"CharacterIdCharacterR"`
	GameIdGame            *Game       `boil:"GameIdGame" json:"GameIdGame" toml:"GameIdGame" yaml:"GameIdGame"`
}

// NewStruct creates a new relationship struct
func (*userStatisticR) NewStruct() *userStatisticR {
	return &userStatisticR{}
}

func (r *userStatisticR) GetUserIdUser() *User {
	if r == nil {
		return nil
	}
	return r.UserIdUser
}

func (r *userStatisticR) GetCharacterIdCharacterR() *CharacterR {
	if r == nil {
		return nil
	}
	return r.CharacterIdCharacterR
}

func (r *userStatisticR) GetGameIdGame() *Game {
	if r == nil {
		return nil
	}
	return r.GameIdGame
}

// userStatisticL is where Load methods for each relationship are stored.
type userStatisticL struct{}

var (
	userStatisticAllColumns            = []string{"Id", "UserId", "GameId", "Date", "SeatId", "CharacterId", "Result"}
	userStatisticColumnsWithoutDefault = []string{"UserId", "GameId", "Date", "SeatId", "CharacterId", "Result"}
	userStatisticColumnsWithDefault    = []string{"Id"}
	userStatisticPrimaryKeyColumns     = []string{"Id"}
	userStatisticGeneratedColumns      = []string{}
)

type (
	// UserStatisticSlice is an alias for a slice of pointers to UserStatistic.
	// This should almost always be used instead of []UserStatistic.
	UserStatisticSlice []*UserStatistic
	// UserStatisticHook is the signature for custom UserStatistic hook methods
	UserStatisticHook func(context.Context, boil.ContextExecutor, *UserStatistic) error

	userStatisticQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userStatisticType                 = reflect.TypeOf(&UserStatistic{})
	userStatisticMapping              = queries.MakeStructMapping(userStatisticType)
	userStatisticPrimaryKeyMapping, _ = queries.BindMapping(userStatisticType, userStatisticMapping, userStatisticPrimaryKeyColumns)
	userStatisticInsertCacheMut       sync.RWMutex
	userStatisticInsertCache          = make(map[string]insertCache)
	userStatisticUpdateCacheMut       sync.RWMutex
	userStatisticUpdateCache          = make(map[string]updateCache)
	userStatisticUpsertCacheMut       sync.RWMutex
	userStatisticUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userStatisticAfterSelectHooks []UserStatisticHook

var userStatisticBeforeInsertHooks []UserStatisticHook
var userStatisticAfterInsertHooks []UserStatisticHook

var userStatisticBeforeUpdateHooks []UserStatisticHook
var userStatisticAfterUpdateHooks []UserStatisticHook

var userStatisticBeforeDeleteHooks []UserStatisticHook
var userStatisticAfterDeleteHooks []UserStatisticHook

var userStatisticBeforeUpsertHooks []UserStatisticHook
var userStatisticAfterUpsertHooks []UserStatisticHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserStatistic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userStatisticAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserStatistic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userStatisticBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserStatistic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userStatisticAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserStatistic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userStatisticBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserStatistic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userStatisticAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserStatistic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userStatisticBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserStatistic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userStatisticAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserStatistic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userStatisticBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserStatistic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userStatisticAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserStatisticHook registers your hook function for all future operations.
func AddUserStatisticHook(hookPoint boil.HookPoint, userStatisticHook UserStatisticHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userStatisticAfterSelectHooks = append(userStatisticAfterSelectHooks, userStatisticHook)
	case boil.BeforeInsertHook:
		userStatisticBeforeInsertHooks = append(userStatisticBeforeInsertHooks, userStatisticHook)
	case boil.AfterInsertHook:
		userStatisticAfterInsertHooks = append(userStatisticAfterInsertHooks, userStatisticHook)
	case boil.BeforeUpdateHook:
		userStatisticBeforeUpdateHooks = append(userStatisticBeforeUpdateHooks, userStatisticHook)
	case boil.AfterUpdateHook:
		userStatisticAfterUpdateHooks = append(userStatisticAfterUpdateHooks, userStatisticHook)
	case boil.BeforeDeleteHook:
		userStatisticBeforeDeleteHooks = append(userStatisticBeforeDeleteHooks, userStatisticHook)
	case boil.AfterDeleteHook:
		userStatisticAfterDeleteHooks = append(userStatisticAfterDeleteHooks, userStatisticHook)
	case boil.BeforeUpsertHook:
		userStatisticBeforeUpsertHooks = append(userStatisticBeforeUpsertHooks, userStatisticHook)
	case boil.AfterUpsertHook:
		userStatisticAfterUpsertHooks = append(userStatisticAfterUpsertHooks, userStatisticHook)
	}
}

// One returns a single userStatistic record from the query.
func (q userStatisticQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserStatistic, error) {
	o := &UserStatistic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for UserStatistics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserStatistic records from the query.
func (q userStatisticQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserStatisticSlice, error) {
	var o []*UserStatistic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserStatistic slice")
	}

	if len(userStatisticAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserStatistic records in the query.
func (q userStatisticQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count UserStatistics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userStatisticQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if UserStatistics exists")
	}

	return count > 0, nil
}

// UserIdUser pointed to by the foreign key.
func (o *UserStatistic) UserIdUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Id` = ?", o.UserId),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// CharacterIdCharacterR pointed to by the foreign key.
func (o *UserStatistic) CharacterIdCharacterR(mods ...qm.QueryMod) characterRQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Id` = ?", o.CharacterId),
	}

	queryMods = append(queryMods, mods...)

	return CharacterRs(queryMods...)
}

// GameIdGame pointed to by the foreign key.
func (o *UserStatistic) GameIdGame(mods ...qm.QueryMod) gameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Id` = ?", o.GameId),
	}

	queryMods = append(queryMods, mods...)

	return Games(queryMods...)
}

// LoadUserIdUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userStatisticL) LoadUserIdUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserStatistic interface{}, mods queries.Applicator) error {
	var slice []*UserStatistic
	var object *UserStatistic

	if singular {
		var ok bool
		object, ok = maybeUserStatistic.(*UserStatistic)
		if !ok {
			object = new(UserStatistic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserStatistic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserStatistic))
			}
		}
	} else {
		s, ok := maybeUserStatistic.(*[]*UserStatistic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserStatistic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserStatistic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userStatisticR{}
		}
		if !queries.IsNil(object.UserId) {
			args = append(args, object.UserId)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userStatisticR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserId) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserId) {
				args = append(args, obj.UserId)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`User`),
		qm.WhereIn(`User.Id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for User")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for User")
	}

	if len(userStatisticAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserIdUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserIdUserStatistics = append(foreign.R.UserIdUserStatistics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserId, foreign.ID) {
				local.R.UserIdUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserIdUserStatistics = append(foreign.R.UserIdUserStatistics, local)
				break
			}
		}
	}

	return nil
}

// LoadCharacterIdCharacterR allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userStatisticL) LoadCharacterIdCharacterR(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserStatistic interface{}, mods queries.Applicator) error {
	var slice []*UserStatistic
	var object *UserStatistic

	if singular {
		var ok bool
		object, ok = maybeUserStatistic.(*UserStatistic)
		if !ok {
			object = new(UserStatistic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserStatistic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserStatistic))
			}
		}
	} else {
		s, ok := maybeUserStatistic.(*[]*UserStatistic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserStatistic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserStatistic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userStatisticR{}
		}
		if !queries.IsNil(object.CharacterId) {
			args = append(args, object.CharacterId)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userStatisticR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CharacterId) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CharacterId) {
				args = append(args, obj.CharacterId)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`CharacterR`),
		qm.WhereIn(`CharacterR.Id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CharacterR")
	}

	var resultSlice []*CharacterR
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CharacterR")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for CharacterR")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for CharacterR")
	}

	if len(userStatisticAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CharacterIdCharacterR = foreign
		if foreign.R == nil {
			foreign.R = &characterRR{}
		}
		foreign.R.CharacterIdUserStatistics = append(foreign.R.CharacterIdUserStatistics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CharacterId, foreign.ID) {
				local.R.CharacterIdCharacterR = foreign
				if foreign.R == nil {
					foreign.R = &characterRR{}
				}
				foreign.R.CharacterIdUserStatistics = append(foreign.R.CharacterIdUserStatistics, local)
				break
			}
		}
	}

	return nil
}

// LoadGameIdGame allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userStatisticL) LoadGameIdGame(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserStatistic interface{}, mods queries.Applicator) error {
	var slice []*UserStatistic
	var object *UserStatistic

	if singular {
		var ok bool
		object, ok = maybeUserStatistic.(*UserStatistic)
		if !ok {
			object = new(UserStatistic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserStatistic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserStatistic))
			}
		}
	} else {
		s, ok := maybeUserStatistic.(*[]*UserStatistic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserStatistic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserStatistic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userStatisticR{}
		}
		if !queries.IsNil(object.GameId) {
			args = append(args, object.GameId)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userStatisticR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GameId) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GameId) {
				args = append(args, obj.GameId)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Game`),
		qm.WhereIn(`Game.Id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Game")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Game")
	}

	if len(userStatisticAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameIdGame = foreign
		if foreign.R == nil {
			foreign.R = &gameR{}
		}
		foreign.R.GameIdUserStatistics = append(foreign.R.GameIdUserStatistics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GameId, foreign.ID) {
				local.R.GameIdGame = foreign
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.GameIdUserStatistics = append(foreign.R.GameIdUserStatistics, local)
				break
			}
		}
	}

	return nil
}

// SetUserIdUser of the userStatistic to the related item.
// Sets o.R.UserIdUser to related.
// Adds o to related.R.UserIdUserStatistics.
func (o *UserStatistic) SetUserIdUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `UserStatistics` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"UserId"}),
		strmangle.WhereClause("`", "`", 0, userStatisticPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserId, related.ID)
	if o.R == nil {
		o.R = &userStatisticR{
			UserIdUser: related,
		}
	} else {
		o.R.UserIdUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UserIdUserStatistics: UserStatisticSlice{o},
		}
	} else {
		related.R.UserIdUserStatistics = append(related.R.UserIdUserStatistics, o)
	}

	return nil
}

// RemoveUserIdUser relationship.
// Sets o.R.UserIdUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserStatistic) RemoveUserIdUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserId, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("UserId")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UserIdUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserIdUserStatistics {
		if queries.Equal(o.UserId, ri.UserId) {
			continue
		}

		ln := len(related.R.UserIdUserStatistics)
		if ln > 1 && i < ln-1 {
			related.R.UserIdUserStatistics[i] = related.R.UserIdUserStatistics[ln-1]
		}
		related.R.UserIdUserStatistics = related.R.UserIdUserStatistics[:ln-1]
		break
	}
	return nil
}

// SetCharacterIdCharacterR of the userStatistic to the related item.
// Sets o.R.CharacterIdCharacterR to related.
// Adds o to related.R.CharacterIdUserStatistics.
func (o *UserStatistic) SetCharacterIdCharacterR(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CharacterR) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `UserStatistics` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CharacterId"}),
		strmangle.WhereClause("`", "`", 0, userStatisticPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CharacterId, related.ID)
	if o.R == nil {
		o.R = &userStatisticR{
			CharacterIdCharacterR: related,
		}
	} else {
		o.R.CharacterIdCharacterR = related
	}

	if related.R == nil {
		related.R = &characterRR{
			CharacterIdUserStatistics: UserStatisticSlice{o},
		}
	} else {
		related.R.CharacterIdUserStatistics = append(related.R.CharacterIdUserStatistics, o)
	}

	return nil
}

// RemoveCharacterIdCharacterR relationship.
// Sets o.R.CharacterIdCharacterR to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserStatistic) RemoveCharacterIdCharacterR(ctx context.Context, exec boil.ContextExecutor, related *CharacterR) error {
	var err error

	queries.SetScanner(&o.CharacterId, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("CharacterId")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CharacterIdCharacterR = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CharacterIdUserStatistics {
		if queries.Equal(o.CharacterId, ri.CharacterId) {
			continue
		}

		ln := len(related.R.CharacterIdUserStatistics)
		if ln > 1 && i < ln-1 {
			related.R.CharacterIdUserStatistics[i] = related.R.CharacterIdUserStatistics[ln-1]
		}
		related.R.CharacterIdUserStatistics = related.R.CharacterIdUserStatistics[:ln-1]
		break
	}
	return nil
}

// SetGameIdGame of the userStatistic to the related item.
// Sets o.R.GameIdGame to related.
// Adds o to related.R.GameIdUserStatistics.
func (o *UserStatistic) SetGameIdGame(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Game) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `UserStatistics` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"GameId"}),
		strmangle.WhereClause("`", "`", 0, userStatisticPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GameId, related.ID)
	if o.R == nil {
		o.R = &userStatisticR{
			GameIdGame: related,
		}
	} else {
		o.R.GameIdGame = related
	}

	if related.R == nil {
		related.R = &gameR{
			GameIdUserStatistics: UserStatisticSlice{o},
		}
	} else {
		related.R.GameIdUserStatistics = append(related.R.GameIdUserStatistics, o)
	}

	return nil
}

// RemoveGameIdGame relationship.
// Sets o.R.GameIdGame to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserStatistic) RemoveGameIdGame(ctx context.Context, exec boil.ContextExecutor, related *Game) error {
	var err error

	queries.SetScanner(&o.GameId, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("GameId")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.GameIdGame = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GameIdUserStatistics {
		if queries.Equal(o.GameId, ri.GameId) {
			continue
		}

		ln := len(related.R.GameIdUserStatistics)
		if ln > 1 && i < ln-1 {
			related.R.GameIdUserStatistics[i] = related.R.GameIdUserStatistics[ln-1]
		}
		related.R.GameIdUserStatistics = related.R.GameIdUserStatistics[:ln-1]
		break
	}
	return nil
}

// UserStatistics retrieves all the records using an executor.
func UserStatistics(mods ...qm.QueryMod) userStatisticQuery {
	mods = append(mods, qm.From("`UserStatistics`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`UserStatistics`.*"})
	}

	return userStatisticQuery{q}
}

// FindUserStatistic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserStatistic(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserStatistic, error) {
	userStatisticObj := &UserStatistic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `UserStatistics` where `Id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userStatisticObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from UserStatistics")
	}

	if err = userStatisticObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userStatisticObj, err
	}

	return userStatisticObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserStatistic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no UserStatistics provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userStatisticColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userStatisticInsertCacheMut.RLock()
	cache, cached := userStatisticInsertCache[key]
	userStatisticInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userStatisticAllColumns,
			userStatisticColumnsWithDefault,
			userStatisticColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userStatisticType, userStatisticMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userStatisticType, userStatisticMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `UserStatistics` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `UserStatistics` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `UserStatistics` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userStatisticPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into UserStatistics")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userStatisticMapping["Id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for UserStatistics")
	}

CacheNoHooks:
	if !cached {
		userStatisticInsertCacheMut.Lock()
		userStatisticInsertCache[key] = cache
		userStatisticInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserStatistic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserStatistic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userStatisticUpdateCacheMut.RLock()
	cache, cached := userStatisticUpdateCache[key]
	userStatisticUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userStatisticAllColumns,
			userStatisticPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update UserStatistics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `UserStatistics` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userStatisticPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userStatisticType, userStatisticMapping, append(wl, userStatisticPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update UserStatistics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for UserStatistics")
	}

	if !cached {
		userStatisticUpdateCacheMut.Lock()
		userStatisticUpdateCache[key] = cache
		userStatisticUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userStatisticQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for UserStatistics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for UserStatistics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserStatisticSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userStatisticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `UserStatistics` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userStatisticPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userStatistic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userStatistic")
	}
	return rowsAff, nil
}

var mySQLUserStatisticUniqueColumns = []string{
	"Id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserStatistic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no UserStatistics provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userStatisticColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserStatisticUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userStatisticUpsertCacheMut.RLock()
	cache, cached := userStatisticUpsertCache[key]
	userStatisticUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userStatisticAllColumns,
			userStatisticColumnsWithDefault,
			userStatisticColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userStatisticAllColumns,
			userStatisticPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert UserStatistics, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`UserStatistics`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `UserStatistics` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userStatisticType, userStatisticMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userStatisticType, userStatisticMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for UserStatistics")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userStatisticMapping["Id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userStatisticType, userStatisticMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for UserStatistics")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for UserStatistics")
	}

CacheNoHooks:
	if !cached {
		userStatisticUpsertCacheMut.Lock()
		userStatisticUpsertCache[key] = cache
		userStatisticUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserStatistic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserStatistic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserStatistic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userStatisticPrimaryKeyMapping)
	sql := "DELETE FROM `UserStatistics` WHERE `Id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from UserStatistics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for UserStatistics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userStatisticQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userStatisticQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from UserStatistics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for UserStatistics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserStatisticSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userStatisticBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userStatisticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `UserStatistics` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userStatisticPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userStatistic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for UserStatistics")
	}

	if len(userStatisticAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserStatistic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserStatistic(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserStatisticSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserStatisticSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userStatisticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `UserStatistics`.* FROM `UserStatistics` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userStatisticPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserStatisticSlice")
	}

	*o = slice

	return nil
}

// UserStatisticExists checks if the UserStatistic row exists.
func UserStatisticExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `UserStatistics` where `Id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if UserStatistics exists")
	}

	return exists, nil
}
