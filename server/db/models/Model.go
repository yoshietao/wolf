// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Model is an object representing the database table.
type Model struct {
	ID   int    `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	Name string `boil:"Name" json:"Name" toml:"Name" yaml:"Name"`

	R *modelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L modelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ModelColumns = struct {
	ID   string
	Name string
}{
	ID:   "Id",
	Name: "Name",
}

var ModelTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "Model.Id",
	Name: "Model.Name",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ModelWhere = struct {
	ID   whereHelperint
	Name whereHelperstring
}{
	ID:   whereHelperint{field: "`Model`.`Id`"},
	Name: whereHelperstring{field: "`Model`.`Name`"},
}

// ModelRels is where relationship names are stored.
var ModelRels = struct {
	ModelIdGames           string
	ModelIdModelCharacters string
}{
	ModelIdGames:           "ModelIdGames",
	ModelIdModelCharacters: "ModelIdModelCharacters",
}

// modelR is where relationships are stored.
type modelR struct {
	ModelIdGames           GameSlice           `boil:"ModelIdGames" json:"ModelIdGames" toml:"ModelIdGames" yaml:"ModelIdGames"`
	ModelIdModelCharacters ModelCharacterSlice `boil:"ModelIdModelCharacters" json:"ModelIdModelCharacters" toml:"ModelIdModelCharacters" yaml:"ModelIdModelCharacters"`
}

// NewStruct creates a new relationship struct
func (*modelR) NewStruct() *modelR {
	return &modelR{}
}

func (r *modelR) GetModelIdGames() GameSlice {
	if r == nil {
		return nil
	}
	return r.ModelIdGames
}

func (r *modelR) GetModelIdModelCharacters() ModelCharacterSlice {
	if r == nil {
		return nil
	}
	return r.ModelIdModelCharacters
}

// modelL is where Load methods for each relationship are stored.
type modelL struct{}

var (
	modelAllColumns            = []string{"Id", "Name"}
	modelColumnsWithoutDefault = []string{"Name"}
	modelColumnsWithDefault    = []string{"Id"}
	modelPrimaryKeyColumns     = []string{"Id"}
	modelGeneratedColumns      = []string{}
)

type (
	// ModelSlice is an alias for a slice of pointers to Model.
	// This should almost always be used instead of []Model.
	ModelSlice []*Model
	// ModelHook is the signature for custom Model hook methods
	ModelHook func(context.Context, boil.ContextExecutor, *Model) error

	modelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	modelType                 = reflect.TypeOf(&Model{})
	modelMapping              = queries.MakeStructMapping(modelType)
	modelPrimaryKeyMapping, _ = queries.BindMapping(modelType, modelMapping, modelPrimaryKeyColumns)
	modelInsertCacheMut       sync.RWMutex
	modelInsertCache          = make(map[string]insertCache)
	modelUpdateCacheMut       sync.RWMutex
	modelUpdateCache          = make(map[string]updateCache)
	modelUpsertCacheMut       sync.RWMutex
	modelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var modelAfterSelectHooks []ModelHook

var modelBeforeInsertHooks []ModelHook
var modelAfterInsertHooks []ModelHook

var modelBeforeUpdateHooks []ModelHook
var modelAfterUpdateHooks []ModelHook

var modelBeforeDeleteHooks []ModelHook
var modelAfterDeleteHooks []ModelHook

var modelBeforeUpsertHooks []ModelHook
var modelAfterUpsertHooks []ModelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Model) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Model) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Model) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Model) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Model) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Model) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Model) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Model) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Model) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddModelHook registers your hook function for all future operations.
func AddModelHook(hookPoint boil.HookPoint, modelHook ModelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		modelAfterSelectHooks = append(modelAfterSelectHooks, modelHook)
	case boil.BeforeInsertHook:
		modelBeforeInsertHooks = append(modelBeforeInsertHooks, modelHook)
	case boil.AfterInsertHook:
		modelAfterInsertHooks = append(modelAfterInsertHooks, modelHook)
	case boil.BeforeUpdateHook:
		modelBeforeUpdateHooks = append(modelBeforeUpdateHooks, modelHook)
	case boil.AfterUpdateHook:
		modelAfterUpdateHooks = append(modelAfterUpdateHooks, modelHook)
	case boil.BeforeDeleteHook:
		modelBeforeDeleteHooks = append(modelBeforeDeleteHooks, modelHook)
	case boil.AfterDeleteHook:
		modelAfterDeleteHooks = append(modelAfterDeleteHooks, modelHook)
	case boil.BeforeUpsertHook:
		modelBeforeUpsertHooks = append(modelBeforeUpsertHooks, modelHook)
	case boil.AfterUpsertHook:
		modelAfterUpsertHooks = append(modelAfterUpsertHooks, modelHook)
	}
}

// One returns a single model record from the query.
func (q modelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Model, error) {
	o := &Model{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Model")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Model records from the query.
func (q modelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ModelSlice, error) {
	var o []*Model

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Model slice")
	}

	if len(modelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Model records in the query.
func (q modelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Model rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q modelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Model exists")
	}

	return count > 0, nil
}

// ModelIdGames retrieves all the Game's Games with an executor via ModelId column.
func (o *Model) ModelIdGames(mods ...qm.QueryMod) gameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Game`.`ModelId`=?", o.ID),
	)

	return Games(queryMods...)
}

// ModelIdModelCharacters retrieves all the ModelCharacter's ModelCharacters with an executor via ModelId column.
func (o *Model) ModelIdModelCharacters(mods ...qm.QueryMod) modelCharacterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ModelCharacter`.`ModelId`=?", o.ID),
	)

	return ModelCharacters(queryMods...)
}

// LoadModelIdGames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (modelL) LoadModelIdGames(ctx context.Context, e boil.ContextExecutor, singular bool, maybeModel interface{}, mods queries.Applicator) error {
	var slice []*Model
	var object *Model

	if singular {
		var ok bool
		object, ok = maybeModel.(*Model)
		if !ok {
			object = new(Model)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeModel))
			}
		}
	} else {
		s, ok := maybeModel.(*[]*Model)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeModel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &modelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &modelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Game`),
		qm.WhereIn(`Game.ModelId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Game")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Game")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ModelIdGames = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gameR{}
			}
			foreign.R.ModelIdModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ModelId) {
				local.R.ModelIdGames = append(local.R.ModelIdGames, foreign)
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.ModelIdModel = local
				break
			}
		}
	}

	return nil
}

// LoadModelIdModelCharacters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (modelL) LoadModelIdModelCharacters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeModel interface{}, mods queries.Applicator) error {
	var slice []*Model
	var object *Model

	if singular {
		var ok bool
		object, ok = maybeModel.(*Model)
		if !ok {
			object = new(Model)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeModel))
			}
		}
	} else {
		s, ok := maybeModel.(*[]*Model)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeModel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &modelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &modelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ModelCharacter`),
		qm.WhereIn(`ModelCharacter.ModelId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ModelCharacter")
	}

	var resultSlice []*ModelCharacter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ModelCharacter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ModelCharacter")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ModelCharacter")
	}

	if len(modelCharacterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ModelIdModelCharacters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &modelCharacterR{}
			}
			foreign.R.ModelIdModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ModelId {
				local.R.ModelIdModelCharacters = append(local.R.ModelIdModelCharacters, foreign)
				if foreign.R == nil {
					foreign.R = &modelCharacterR{}
				}
				foreign.R.ModelIdModel = local
				break
			}
		}
	}

	return nil
}

// AddModelIdGames adds the given related objects to the existing relationships
// of the Model, optionally inserting them as new records.
// Appends related to o.R.ModelIdGames.
// Sets related.R.ModelIdModel appropriately.
func (o *Model) AddModelIdGames(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Game) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ModelId, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Game` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ModelId"}),
				strmangle.WhereClause("`", "`", 0, gamePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ModelId, o.ID)
		}
	}

	if o.R == nil {
		o.R = &modelR{
			ModelIdGames: related,
		}
	} else {
		o.R.ModelIdGames = append(o.R.ModelIdGames, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gameR{
				ModelIdModel: o,
			}
		} else {
			rel.R.ModelIdModel = o
		}
	}
	return nil
}

// SetModelIdGames removes all previously related items of the
// Model replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ModelIdModel's ModelIdGames accordingly.
// Replaces o.R.ModelIdGames with related.
// Sets related.R.ModelIdModel's ModelIdGames accordingly.
func (o *Model) SetModelIdGames(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Game) error {
	query := "update `Game` set `ModelId` = null where `ModelId` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ModelIdGames {
			queries.SetScanner(&rel.ModelId, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ModelIdModel = nil
		}
		o.R.ModelIdGames = nil
	}

	return o.AddModelIdGames(ctx, exec, insert, related...)
}

// RemoveModelIdGames relationships from objects passed in.
// Removes related items from R.ModelIdGames (uses pointer comparison, removal does not keep order)
// Sets related.R.ModelIdModel.
func (o *Model) RemoveModelIdGames(ctx context.Context, exec boil.ContextExecutor, related ...*Game) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ModelId, nil)
		if rel.R != nil {
			rel.R.ModelIdModel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("ModelId")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ModelIdGames {
			if rel != ri {
				continue
			}

			ln := len(o.R.ModelIdGames)
			if ln > 1 && i < ln-1 {
				o.R.ModelIdGames[i] = o.R.ModelIdGames[ln-1]
			}
			o.R.ModelIdGames = o.R.ModelIdGames[:ln-1]
			break
		}
	}

	return nil
}

// AddModelIdModelCharacters adds the given related objects to the existing relationships
// of the Model, optionally inserting them as new records.
// Appends related to o.R.ModelIdModelCharacters.
// Sets related.R.ModelIdModel appropriately.
func (o *Model) AddModelIdModelCharacters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ModelCharacter) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ModelId = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ModelCharacter` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ModelId"}),
				strmangle.WhereClause("`", "`", 0, modelCharacterPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ModelId = o.ID
		}
	}

	if o.R == nil {
		o.R = &modelR{
			ModelIdModelCharacters: related,
		}
	} else {
		o.R.ModelIdModelCharacters = append(o.R.ModelIdModelCharacters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &modelCharacterR{
				ModelIdModel: o,
			}
		} else {
			rel.R.ModelIdModel = o
		}
	}
	return nil
}

// Models retrieves all the records using an executor.
func Models(mods ...qm.QueryMod) modelQuery {
	mods = append(mods, qm.From("`Model`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`Model`.*"})
	}

	return modelQuery{q}
}

// FindModel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindModel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Model, error) {
	modelObj := &Model{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Model` where `Id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, modelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Model")
	}

	if err = modelObj.doAfterSelectHooks(ctx, exec); err != nil {
		return modelObj, err
	}

	return modelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Model) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Model provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(modelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	modelInsertCacheMut.RLock()
	cache, cached := modelInsertCache[key]
	modelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			modelAllColumns,
			modelColumnsWithDefault,
			modelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(modelType, modelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(modelType, modelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Model` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Model` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Model` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, modelPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Model")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == modelMapping["Id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Model")
	}

CacheNoHooks:
	if !cached {
		modelInsertCacheMut.Lock()
		modelInsertCache[key] = cache
		modelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Model.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Model) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	modelUpdateCacheMut.RLock()
	cache, cached := modelUpdateCache[key]
	modelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			modelAllColumns,
			modelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Model, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Model` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, modelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(modelType, modelMapping, append(wl, modelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Model row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Model")
	}

	if !cached {
		modelUpdateCacheMut.Lock()
		modelUpdateCache[key] = cache
		modelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q modelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Model")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Model")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ModelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Model` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, modelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in model slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all model")
	}
	return rowsAff, nil
}

var mySQLModelUniqueColumns = []string{
	"Id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Model) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Model provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(modelColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLModelUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	modelUpsertCacheMut.RLock()
	cache, cached := modelUpsertCache[key]
	modelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			modelAllColumns,
			modelColumnsWithDefault,
			modelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			modelAllColumns,
			modelPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert Model, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`Model`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Model` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(modelType, modelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(modelType, modelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Model")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == modelMapping["Id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(modelType, modelMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Model")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Model")
	}

CacheNoHooks:
	if !cached {
		modelUpsertCacheMut.Lock()
		modelUpsertCache[key] = cache
		modelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Model record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Model) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Model provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), modelPrimaryKeyMapping)
	sql := "DELETE FROM `Model` WHERE `Id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Model")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Model")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q modelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no modelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Model")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Model")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ModelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(modelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Model` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, modelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from model slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Model")
	}

	if len(modelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Model) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindModel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ModelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ModelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Model`.* FROM `Model` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, modelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ModelSlice")
	}

	*o = slice

	return nil
}

// ModelExists checks if the Model row exists.
func ModelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Model` where `Id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Model exists")
	}

	return exists, nil
}
