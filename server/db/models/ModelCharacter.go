// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ModelCharacter is an object representing the database table.
type ModelCharacter struct {
	ID          int `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	ModelId     int `boil:"ModelId" json:"ModelId" toml:"ModelId" yaml:"ModelId"`
	CharacterId int `boil:"CharacterId" json:"CharacterId" toml:"CharacterId" yaml:"CharacterId"`

	R *modelCharacterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L modelCharacterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ModelCharacterColumns = struct {
	ID          string
	ModelId     string
	CharacterId string
}{
	ID:          "Id",
	ModelId:     "ModelId",
	CharacterId: "CharacterId",
}

var ModelCharacterTableColumns = struct {
	ID          string
	ModelId     string
	CharacterId string
}{
	ID:          "ModelCharacter.Id",
	ModelId:     "ModelCharacter.ModelId",
	CharacterId: "ModelCharacter.CharacterId",
}

// Generated where

var ModelCharacterWhere = struct {
	ID          whereHelperint
	ModelId     whereHelperint
	CharacterId whereHelperint
}{
	ID:          whereHelperint{field: "`ModelCharacter`.`Id`"},
	ModelId:     whereHelperint{field: "`ModelCharacter`.`ModelId`"},
	CharacterId: whereHelperint{field: "`ModelCharacter`.`CharacterId`"},
}

// ModelCharacterRels is where relationship names are stored.
var ModelCharacterRels = struct {
	ModelIdModel          string
	CharacterIdCharacterR string
}{
	ModelIdModel:          "ModelIdModel",
	CharacterIdCharacterR: "CharacterIdCharacterR",
}

// modelCharacterR is where relationships are stored.
type modelCharacterR struct {
	ModelIdModel          *Model      `boil:"ModelIdModel" json:"ModelIdModel" toml:"ModelIdModel" yaml:"ModelIdModel"`
	CharacterIdCharacterR *CharacterR `boil:"CharacterIdCharacterR" json:"CharacterIdCharacterR" toml:"CharacterIdCharacterR" yaml:"CharacterIdCharacterR"`
}

// NewStruct creates a new relationship struct
func (*modelCharacterR) NewStruct() *modelCharacterR {
	return &modelCharacterR{}
}

func (r *modelCharacterR) GetModelIdModel() *Model {
	if r == nil {
		return nil
	}
	return r.ModelIdModel
}

func (r *modelCharacterR) GetCharacterIdCharacterR() *CharacterR {
	if r == nil {
		return nil
	}
	return r.CharacterIdCharacterR
}

// modelCharacterL is where Load methods for each relationship are stored.
type modelCharacterL struct{}

var (
	modelCharacterAllColumns            = []string{"Id", "ModelId", "CharacterId"}
	modelCharacterColumnsWithoutDefault = []string{"ModelId", "CharacterId"}
	modelCharacterColumnsWithDefault    = []string{"Id"}
	modelCharacterPrimaryKeyColumns     = []string{"Id"}
	modelCharacterGeneratedColumns      = []string{}
)

type (
	// ModelCharacterSlice is an alias for a slice of pointers to ModelCharacter.
	// This should almost always be used instead of []ModelCharacter.
	ModelCharacterSlice []*ModelCharacter
	// ModelCharacterHook is the signature for custom ModelCharacter hook methods
	ModelCharacterHook func(context.Context, boil.ContextExecutor, *ModelCharacter) error

	modelCharacterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	modelCharacterType                 = reflect.TypeOf(&ModelCharacter{})
	modelCharacterMapping              = queries.MakeStructMapping(modelCharacterType)
	modelCharacterPrimaryKeyMapping, _ = queries.BindMapping(modelCharacterType, modelCharacterMapping, modelCharacterPrimaryKeyColumns)
	modelCharacterInsertCacheMut       sync.RWMutex
	modelCharacterInsertCache          = make(map[string]insertCache)
	modelCharacterUpdateCacheMut       sync.RWMutex
	modelCharacterUpdateCache          = make(map[string]updateCache)
	modelCharacterUpsertCacheMut       sync.RWMutex
	modelCharacterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var modelCharacterAfterSelectHooks []ModelCharacterHook

var modelCharacterBeforeInsertHooks []ModelCharacterHook
var modelCharacterAfterInsertHooks []ModelCharacterHook

var modelCharacterBeforeUpdateHooks []ModelCharacterHook
var modelCharacterAfterUpdateHooks []ModelCharacterHook

var modelCharacterBeforeDeleteHooks []ModelCharacterHook
var modelCharacterAfterDeleteHooks []ModelCharacterHook

var modelCharacterBeforeUpsertHooks []ModelCharacterHook
var modelCharacterAfterUpsertHooks []ModelCharacterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ModelCharacter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelCharacterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ModelCharacter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelCharacterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ModelCharacter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelCharacterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ModelCharacter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelCharacterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ModelCharacter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelCharacterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ModelCharacter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelCharacterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ModelCharacter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelCharacterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ModelCharacter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelCharacterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ModelCharacter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range modelCharacterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddModelCharacterHook registers your hook function for all future operations.
func AddModelCharacterHook(hookPoint boil.HookPoint, modelCharacterHook ModelCharacterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		modelCharacterAfterSelectHooks = append(modelCharacterAfterSelectHooks, modelCharacterHook)
	case boil.BeforeInsertHook:
		modelCharacterBeforeInsertHooks = append(modelCharacterBeforeInsertHooks, modelCharacterHook)
	case boil.AfterInsertHook:
		modelCharacterAfterInsertHooks = append(modelCharacterAfterInsertHooks, modelCharacterHook)
	case boil.BeforeUpdateHook:
		modelCharacterBeforeUpdateHooks = append(modelCharacterBeforeUpdateHooks, modelCharacterHook)
	case boil.AfterUpdateHook:
		modelCharacterAfterUpdateHooks = append(modelCharacterAfterUpdateHooks, modelCharacterHook)
	case boil.BeforeDeleteHook:
		modelCharacterBeforeDeleteHooks = append(modelCharacterBeforeDeleteHooks, modelCharacterHook)
	case boil.AfterDeleteHook:
		modelCharacterAfterDeleteHooks = append(modelCharacterAfterDeleteHooks, modelCharacterHook)
	case boil.BeforeUpsertHook:
		modelCharacterBeforeUpsertHooks = append(modelCharacterBeforeUpsertHooks, modelCharacterHook)
	case boil.AfterUpsertHook:
		modelCharacterAfterUpsertHooks = append(modelCharacterAfterUpsertHooks, modelCharacterHook)
	}
}

// One returns a single modelCharacter record from the query.
func (q modelCharacterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ModelCharacter, error) {
	o := &ModelCharacter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ModelCharacter")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ModelCharacter records from the query.
func (q modelCharacterQuery) All(ctx context.Context, exec boil.ContextExecutor) (ModelCharacterSlice, error) {
	var o []*ModelCharacter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ModelCharacter slice")
	}

	if len(modelCharacterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ModelCharacter records in the query.
func (q modelCharacterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ModelCharacter rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q modelCharacterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ModelCharacter exists")
	}

	return count > 0, nil
}

// ModelIdModel pointed to by the foreign key.
func (o *ModelCharacter) ModelIdModel(mods ...qm.QueryMod) modelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Id` = ?", o.ModelId),
	}

	queryMods = append(queryMods, mods...)

	return Models(queryMods...)
}

// CharacterIdCharacterR pointed to by the foreign key.
func (o *ModelCharacter) CharacterIdCharacterR(mods ...qm.QueryMod) characterRQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Id` = ?", o.CharacterId),
	}

	queryMods = append(queryMods, mods...)

	return CharacterRs(queryMods...)
}

// LoadModelIdModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (modelCharacterL) LoadModelIdModel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeModelCharacter interface{}, mods queries.Applicator) error {
	var slice []*ModelCharacter
	var object *ModelCharacter

	if singular {
		var ok bool
		object, ok = maybeModelCharacter.(*ModelCharacter)
		if !ok {
			object = new(ModelCharacter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeModelCharacter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeModelCharacter))
			}
		}
	} else {
		s, ok := maybeModelCharacter.(*[]*ModelCharacter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeModelCharacter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeModelCharacter))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &modelCharacterR{}
		}
		args = append(args, object.ModelId)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &modelCharacterR{}
			}

			for _, a := range args {
				if a == obj.ModelId {
					continue Outer
				}
			}

			args = append(args, obj.ModelId)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Model`),
		qm.WhereIn(`Model.Id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Model")
	}

	var resultSlice []*Model
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Model")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Model")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Model")
	}

	if len(modelCharacterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ModelIdModel = foreign
		if foreign.R == nil {
			foreign.R = &modelR{}
		}
		foreign.R.ModelIdModelCharacters = append(foreign.R.ModelIdModelCharacters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModelId == foreign.ID {
				local.R.ModelIdModel = foreign
				if foreign.R == nil {
					foreign.R = &modelR{}
				}
				foreign.R.ModelIdModelCharacters = append(foreign.R.ModelIdModelCharacters, local)
				break
			}
		}
	}

	return nil
}

// LoadCharacterIdCharacterR allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (modelCharacterL) LoadCharacterIdCharacterR(ctx context.Context, e boil.ContextExecutor, singular bool, maybeModelCharacter interface{}, mods queries.Applicator) error {
	var slice []*ModelCharacter
	var object *ModelCharacter

	if singular {
		var ok bool
		object, ok = maybeModelCharacter.(*ModelCharacter)
		if !ok {
			object = new(ModelCharacter)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeModelCharacter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeModelCharacter))
			}
		}
	} else {
		s, ok := maybeModelCharacter.(*[]*ModelCharacter)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeModelCharacter)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeModelCharacter))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &modelCharacterR{}
		}
		args = append(args, object.CharacterId)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &modelCharacterR{}
			}

			for _, a := range args {
				if a == obj.CharacterId {
					continue Outer
				}
			}

			args = append(args, obj.CharacterId)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`CharacterR`),
		qm.WhereIn(`CharacterR.Id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CharacterR")
	}

	var resultSlice []*CharacterR
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CharacterR")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for CharacterR")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for CharacterR")
	}

	if len(modelCharacterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CharacterIdCharacterR = foreign
		if foreign.R == nil {
			foreign.R = &characterRR{}
		}
		foreign.R.CharacterIdModelCharacters = append(foreign.R.CharacterIdModelCharacters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CharacterId == foreign.ID {
				local.R.CharacterIdCharacterR = foreign
				if foreign.R == nil {
					foreign.R = &characterRR{}
				}
				foreign.R.CharacterIdModelCharacters = append(foreign.R.CharacterIdModelCharacters, local)
				break
			}
		}
	}

	return nil
}

// SetModelIdModel of the modelCharacter to the related item.
// Sets o.R.ModelIdModel to related.
// Adds o to related.R.ModelIdModelCharacters.
func (o *ModelCharacter) SetModelIdModel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Model) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ModelCharacter` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ModelId"}),
		strmangle.WhereClause("`", "`", 0, modelCharacterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModelId = related.ID
	if o.R == nil {
		o.R = &modelCharacterR{
			ModelIdModel: related,
		}
	} else {
		o.R.ModelIdModel = related
	}

	if related.R == nil {
		related.R = &modelR{
			ModelIdModelCharacters: ModelCharacterSlice{o},
		}
	} else {
		related.R.ModelIdModelCharacters = append(related.R.ModelIdModelCharacters, o)
	}

	return nil
}

// SetCharacterIdCharacterR of the modelCharacter to the related item.
// Sets o.R.CharacterIdCharacterR to related.
// Adds o to related.R.CharacterIdModelCharacters.
func (o *ModelCharacter) SetCharacterIdCharacterR(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CharacterR) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ModelCharacter` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CharacterId"}),
		strmangle.WhereClause("`", "`", 0, modelCharacterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CharacterId = related.ID
	if o.R == nil {
		o.R = &modelCharacterR{
			CharacterIdCharacterR: related,
		}
	} else {
		o.R.CharacterIdCharacterR = related
	}

	if related.R == nil {
		related.R = &characterRR{
			CharacterIdModelCharacters: ModelCharacterSlice{o},
		}
	} else {
		related.R.CharacterIdModelCharacters = append(related.R.CharacterIdModelCharacters, o)
	}

	return nil
}

// ModelCharacters retrieves all the records using an executor.
func ModelCharacters(mods ...qm.QueryMod) modelCharacterQuery {
	mods = append(mods, qm.From("`ModelCharacter`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`ModelCharacter`.*"})
	}

	return modelCharacterQuery{q}
}

// FindModelCharacter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindModelCharacter(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ModelCharacter, error) {
	modelCharacterObj := &ModelCharacter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ModelCharacter` where `Id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, modelCharacterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ModelCharacter")
	}

	if err = modelCharacterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return modelCharacterObj, err
	}

	return modelCharacterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ModelCharacter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ModelCharacter provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(modelCharacterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	modelCharacterInsertCacheMut.RLock()
	cache, cached := modelCharacterInsertCache[key]
	modelCharacterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			modelCharacterAllColumns,
			modelCharacterColumnsWithDefault,
			modelCharacterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(modelCharacterType, modelCharacterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(modelCharacterType, modelCharacterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ModelCharacter` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ModelCharacter` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ModelCharacter` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, modelCharacterPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ModelCharacter")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == modelCharacterMapping["Id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ModelCharacter")
	}

CacheNoHooks:
	if !cached {
		modelCharacterInsertCacheMut.Lock()
		modelCharacterInsertCache[key] = cache
		modelCharacterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ModelCharacter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ModelCharacter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	modelCharacterUpdateCacheMut.RLock()
	cache, cached := modelCharacterUpdateCache[key]
	modelCharacterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			modelCharacterAllColumns,
			modelCharacterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ModelCharacter, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ModelCharacter` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, modelCharacterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(modelCharacterType, modelCharacterMapping, append(wl, modelCharacterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ModelCharacter row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ModelCharacter")
	}

	if !cached {
		modelCharacterUpdateCacheMut.Lock()
		modelCharacterUpdateCache[key] = cache
		modelCharacterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q modelCharacterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ModelCharacter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ModelCharacter")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ModelCharacterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modelCharacterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ModelCharacter` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, modelCharacterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in modelCharacter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all modelCharacter")
	}
	return rowsAff, nil
}

var mySQLModelCharacterUniqueColumns = []string{
	"Id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ModelCharacter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ModelCharacter provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(modelCharacterColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLModelCharacterUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	modelCharacterUpsertCacheMut.RLock()
	cache, cached := modelCharacterUpsertCache[key]
	modelCharacterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			modelCharacterAllColumns,
			modelCharacterColumnsWithDefault,
			modelCharacterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			modelCharacterAllColumns,
			modelCharacterPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ModelCharacter, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`ModelCharacter`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ModelCharacter` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(modelCharacterType, modelCharacterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(modelCharacterType, modelCharacterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ModelCharacter")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == modelCharacterMapping["Id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(modelCharacterType, modelCharacterMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ModelCharacter")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ModelCharacter")
	}

CacheNoHooks:
	if !cached {
		modelCharacterUpsertCacheMut.Lock()
		modelCharacterUpsertCache[key] = cache
		modelCharacterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ModelCharacter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ModelCharacter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ModelCharacter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), modelCharacterPrimaryKeyMapping)
	sql := "DELETE FROM `ModelCharacter` WHERE `Id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ModelCharacter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ModelCharacter")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q modelCharacterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no modelCharacterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ModelCharacter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ModelCharacter")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ModelCharacterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(modelCharacterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modelCharacterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ModelCharacter` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, modelCharacterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from modelCharacter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ModelCharacter")
	}

	if len(modelCharacterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ModelCharacter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindModelCharacter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ModelCharacterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ModelCharacterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modelCharacterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ModelCharacter`.* FROM `ModelCharacter` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, modelCharacterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ModelCharacterSlice")
	}

	*o = slice

	return nil
}

// ModelCharacterExists checks if the ModelCharacter row exists.
func ModelCharacterExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ModelCharacter` where `Id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ModelCharacter exists")
	}

	return exists, nil
}
