// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CharacterR is an object representing the database table.
type CharacterR struct {
	ID   int         `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	Name null.String `boil:"Name" json:"Name,omitempty" toml:"Name" yaml:"Name,omitempty"`

	R *characterRR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L characterRL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CharacterRColumns = struct {
	ID   string
	Name string
}{
	ID:   "Id",
	Name: "Name",
}

var CharacterRTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "CharacterR.Id",
	Name: "CharacterR.Name",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CharacterRWhere = struct {
	ID   whereHelperint
	Name whereHelpernull_String
}{
	ID:   whereHelperint{field: "`CharacterR`.`Id`"},
	Name: whereHelpernull_String{field: "`CharacterR`.`Name`"},
}

// CharacterRRels is where relationship names are stored.
var CharacterRRels = struct {
	CharacterIdModelCharacters string
	CharacterIdPlayers         string
	CharacterIdUserStatistics  string
}{
	CharacterIdModelCharacters: "CharacterIdModelCharacters",
	CharacterIdPlayers:         "CharacterIdPlayers",
	CharacterIdUserStatistics:  "CharacterIdUserStatistics",
}

// characterRR is where relationships are stored.
type characterRR struct {
	CharacterIdModelCharacters ModelCharacterSlice `boil:"CharacterIdModelCharacters" json:"CharacterIdModelCharacters" toml:"CharacterIdModelCharacters" yaml:"CharacterIdModelCharacters"`
	CharacterIdPlayers         PlayerSlice         `boil:"CharacterIdPlayers" json:"CharacterIdPlayers" toml:"CharacterIdPlayers" yaml:"CharacterIdPlayers"`
	CharacterIdUserStatistics  UserStatisticSlice  `boil:"CharacterIdUserStatistics" json:"CharacterIdUserStatistics" toml:"CharacterIdUserStatistics" yaml:"CharacterIdUserStatistics"`
}

// NewStruct creates a new relationship struct
func (*characterRR) NewStruct() *characterRR {
	return &characterRR{}
}

func (r *characterRR) GetCharacterIdModelCharacters() ModelCharacterSlice {
	if r == nil {
		return nil
	}
	return r.CharacterIdModelCharacters
}

func (r *characterRR) GetCharacterIdPlayers() PlayerSlice {
	if r == nil {
		return nil
	}
	return r.CharacterIdPlayers
}

func (r *characterRR) GetCharacterIdUserStatistics() UserStatisticSlice {
	if r == nil {
		return nil
	}
	return r.CharacterIdUserStatistics
}

// characterRL is where Load methods for each relationship are stored.
type characterRL struct{}

var (
	characterRAllColumns            = []string{"Id", "Name"}
	characterRColumnsWithoutDefault = []string{"Name"}
	characterRColumnsWithDefault    = []string{"Id"}
	characterRPrimaryKeyColumns     = []string{"Id"}
	characterRGeneratedColumns      = []string{}
)

type (
	// CharacterRSlice is an alias for a slice of pointers to CharacterR.
	// This should almost always be used instead of []CharacterR.
	CharacterRSlice []*CharacterR
	// CharacterRHook is the signature for custom CharacterR hook methods
	CharacterRHook func(context.Context, boil.ContextExecutor, *CharacterR) error

	characterRQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	characterRType                 = reflect.TypeOf(&CharacterR{})
	characterRMapping              = queries.MakeStructMapping(characterRType)
	characterRPrimaryKeyMapping, _ = queries.BindMapping(characterRType, characterRMapping, characterRPrimaryKeyColumns)
	characterRInsertCacheMut       sync.RWMutex
	characterRInsertCache          = make(map[string]insertCache)
	characterRUpdateCacheMut       sync.RWMutex
	characterRUpdateCache          = make(map[string]updateCache)
	characterRUpsertCacheMut       sync.RWMutex
	characterRUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var characterRAfterSelectHooks []CharacterRHook

var characterRBeforeInsertHooks []CharacterRHook
var characterRAfterInsertHooks []CharacterRHook

var characterRBeforeUpdateHooks []CharacterRHook
var characterRAfterUpdateHooks []CharacterRHook

var characterRBeforeDeleteHooks []CharacterRHook
var characterRAfterDeleteHooks []CharacterRHook

var characterRBeforeUpsertHooks []CharacterRHook
var characterRAfterUpsertHooks []CharacterRHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CharacterR) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterRAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CharacterR) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterRBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CharacterR) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterRAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CharacterR) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterRBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CharacterR) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterRAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CharacterR) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterRBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CharacterR) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterRAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CharacterR) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterRBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CharacterR) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range characterRAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCharacterRHook registers your hook function for all future operations.
func AddCharacterRHook(hookPoint boil.HookPoint, characterRHook CharacterRHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		characterRAfterSelectHooks = append(characterRAfterSelectHooks, characterRHook)
	case boil.BeforeInsertHook:
		characterRBeforeInsertHooks = append(characterRBeforeInsertHooks, characterRHook)
	case boil.AfterInsertHook:
		characterRAfterInsertHooks = append(characterRAfterInsertHooks, characterRHook)
	case boil.BeforeUpdateHook:
		characterRBeforeUpdateHooks = append(characterRBeforeUpdateHooks, characterRHook)
	case boil.AfterUpdateHook:
		characterRAfterUpdateHooks = append(characterRAfterUpdateHooks, characterRHook)
	case boil.BeforeDeleteHook:
		characterRBeforeDeleteHooks = append(characterRBeforeDeleteHooks, characterRHook)
	case boil.AfterDeleteHook:
		characterRAfterDeleteHooks = append(characterRAfterDeleteHooks, characterRHook)
	case boil.BeforeUpsertHook:
		characterRBeforeUpsertHooks = append(characterRBeforeUpsertHooks, characterRHook)
	case boil.AfterUpsertHook:
		characterRAfterUpsertHooks = append(characterRAfterUpsertHooks, characterRHook)
	}
}

// One returns a single characterR record from the query.
func (q characterRQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CharacterR, error) {
	o := &CharacterR{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for CharacterR")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CharacterR records from the query.
func (q characterRQuery) All(ctx context.Context, exec boil.ContextExecutor) (CharacterRSlice, error) {
	var o []*CharacterR

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CharacterR slice")
	}

	if len(characterRAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CharacterR records in the query.
func (q characterRQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count CharacterR rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q characterRQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if CharacterR exists")
	}

	return count > 0, nil
}

// CharacterIdModelCharacters retrieves all the ModelCharacter's ModelCharacters with an executor via CharacterId column.
func (o *CharacterR) CharacterIdModelCharacters(mods ...qm.QueryMod) modelCharacterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ModelCharacter`.`CharacterId`=?", o.ID),
	)

	return ModelCharacters(queryMods...)
}

// CharacterIdPlayers retrieves all the Player's Players with an executor via CharacterId column.
func (o *CharacterR) CharacterIdPlayers(mods ...qm.QueryMod) playerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Player`.`CharacterId`=?", o.ID),
	)

	return Players(queryMods...)
}

// CharacterIdUserStatistics retrieves all the UserStatistic's UserStatistics with an executor via CharacterId column.
func (o *CharacterR) CharacterIdUserStatistics(mods ...qm.QueryMod) userStatisticQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`UserStatistics`.`CharacterId`=?", o.ID),
	)

	return UserStatistics(queryMods...)
}

// LoadCharacterIdModelCharacters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (characterRL) LoadCharacterIdModelCharacters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCharacterR interface{}, mods queries.Applicator) error {
	var slice []*CharacterR
	var object *CharacterR

	if singular {
		var ok bool
		object, ok = maybeCharacterR.(*CharacterR)
		if !ok {
			object = new(CharacterR)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCharacterR)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCharacterR))
			}
		}
	} else {
		s, ok := maybeCharacterR.(*[]*CharacterR)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCharacterR)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCharacterR))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &characterRR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &characterRR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ModelCharacter`),
		qm.WhereIn(`ModelCharacter.CharacterId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ModelCharacter")
	}

	var resultSlice []*ModelCharacter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ModelCharacter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ModelCharacter")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ModelCharacter")
	}

	if len(modelCharacterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CharacterIdModelCharacters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &modelCharacterR{}
			}
			foreign.R.CharacterIdCharacterR = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CharacterId {
				local.R.CharacterIdModelCharacters = append(local.R.CharacterIdModelCharacters, foreign)
				if foreign.R == nil {
					foreign.R = &modelCharacterR{}
				}
				foreign.R.CharacterIdCharacterR = local
				break
			}
		}
	}

	return nil
}

// LoadCharacterIdPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (characterRL) LoadCharacterIdPlayers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCharacterR interface{}, mods queries.Applicator) error {
	var slice []*CharacterR
	var object *CharacterR

	if singular {
		var ok bool
		object, ok = maybeCharacterR.(*CharacterR)
		if !ok {
			object = new(CharacterR)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCharacterR)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCharacterR))
			}
		}
	} else {
		s, ok := maybeCharacterR.(*[]*CharacterR)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCharacterR)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCharacterR))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &characterRR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &characterRR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Player`),
		qm.WhereIn(`Player.CharacterId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Player")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Player")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CharacterIdPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerR{}
			}
			foreign.R.CharacterIdCharacterR = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CharacterId) {
				local.R.CharacterIdPlayers = append(local.R.CharacterIdPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.CharacterIdCharacterR = local
				break
			}
		}
	}

	return nil
}

// LoadCharacterIdUserStatistics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (characterRL) LoadCharacterIdUserStatistics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCharacterR interface{}, mods queries.Applicator) error {
	var slice []*CharacterR
	var object *CharacterR

	if singular {
		var ok bool
		object, ok = maybeCharacterR.(*CharacterR)
		if !ok {
			object = new(CharacterR)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCharacterR)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCharacterR))
			}
		}
	} else {
		s, ok := maybeCharacterR.(*[]*CharacterR)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCharacterR)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCharacterR))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &characterRR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &characterRR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`UserStatistics`),
		qm.WhereIn(`UserStatistics.CharacterId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserStatistics")
	}

	var resultSlice []*UserStatistic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserStatistics")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on UserStatistics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for UserStatistics")
	}

	if len(userStatisticAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CharacterIdUserStatistics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userStatisticR{}
			}
			foreign.R.CharacterIdCharacterR = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CharacterId) {
				local.R.CharacterIdUserStatistics = append(local.R.CharacterIdUserStatistics, foreign)
				if foreign.R == nil {
					foreign.R = &userStatisticR{}
				}
				foreign.R.CharacterIdCharacterR = local
				break
			}
		}
	}

	return nil
}

// AddCharacterIdModelCharacters adds the given related objects to the existing relationships
// of the CharacterR, optionally inserting them as new records.
// Appends related to o.R.CharacterIdModelCharacters.
// Sets related.R.CharacterIdCharacterR appropriately.
func (o *CharacterR) AddCharacterIdModelCharacters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ModelCharacter) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CharacterId = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ModelCharacter` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CharacterId"}),
				strmangle.WhereClause("`", "`", 0, modelCharacterPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CharacterId = o.ID
		}
	}

	if o.R == nil {
		o.R = &characterRR{
			CharacterIdModelCharacters: related,
		}
	} else {
		o.R.CharacterIdModelCharacters = append(o.R.CharacterIdModelCharacters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &modelCharacterR{
				CharacterIdCharacterR: o,
			}
		} else {
			rel.R.CharacterIdCharacterR = o
		}
	}
	return nil
}

// AddCharacterIdPlayers adds the given related objects to the existing relationships
// of the CharacterR, optionally inserting them as new records.
// Appends related to o.R.CharacterIdPlayers.
// Sets related.R.CharacterIdCharacterR appropriately.
func (o *CharacterR) AddCharacterIdPlayers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Player) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CharacterId, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Player` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CharacterId"}),
				strmangle.WhereClause("`", "`", 0, playerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CharacterId, o.ID)
		}
	}

	if o.R == nil {
		o.R = &characterRR{
			CharacterIdPlayers: related,
		}
	} else {
		o.R.CharacterIdPlayers = append(o.R.CharacterIdPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerR{
				CharacterIdCharacterR: o,
			}
		} else {
			rel.R.CharacterIdCharacterR = o
		}
	}
	return nil
}

// SetCharacterIdPlayers removes all previously related items of the
// CharacterR replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CharacterIdCharacterR's CharacterIdPlayers accordingly.
// Replaces o.R.CharacterIdPlayers with related.
// Sets related.R.CharacterIdCharacterR's CharacterIdPlayers accordingly.
func (o *CharacterR) SetCharacterIdPlayers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Player) error {
	query := "update `Player` set `CharacterId` = null where `CharacterId` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CharacterIdPlayers {
			queries.SetScanner(&rel.CharacterId, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CharacterIdCharacterR = nil
		}
		o.R.CharacterIdPlayers = nil
	}

	return o.AddCharacterIdPlayers(ctx, exec, insert, related...)
}

// RemoveCharacterIdPlayers relationships from objects passed in.
// Removes related items from R.CharacterIdPlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.CharacterIdCharacterR.
func (o *CharacterR) RemoveCharacterIdPlayers(ctx context.Context, exec boil.ContextExecutor, related ...*Player) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CharacterId, nil)
		if rel.R != nil {
			rel.R.CharacterIdCharacterR = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("CharacterId")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CharacterIdPlayers {
			if rel != ri {
				continue
			}

			ln := len(o.R.CharacterIdPlayers)
			if ln > 1 && i < ln-1 {
				o.R.CharacterIdPlayers[i] = o.R.CharacterIdPlayers[ln-1]
			}
			o.R.CharacterIdPlayers = o.R.CharacterIdPlayers[:ln-1]
			break
		}
	}

	return nil
}

// AddCharacterIdUserStatistics adds the given related objects to the existing relationships
// of the CharacterR, optionally inserting them as new records.
// Appends related to o.R.CharacterIdUserStatistics.
// Sets related.R.CharacterIdCharacterR appropriately.
func (o *CharacterR) AddCharacterIdUserStatistics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserStatistic) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CharacterId, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `UserStatistics` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CharacterId"}),
				strmangle.WhereClause("`", "`", 0, userStatisticPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CharacterId, o.ID)
		}
	}

	if o.R == nil {
		o.R = &characterRR{
			CharacterIdUserStatistics: related,
		}
	} else {
		o.R.CharacterIdUserStatistics = append(o.R.CharacterIdUserStatistics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userStatisticR{
				CharacterIdCharacterR: o,
			}
		} else {
			rel.R.CharacterIdCharacterR = o
		}
	}
	return nil
}

// SetCharacterIdUserStatistics removes all previously related items of the
// CharacterR replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CharacterIdCharacterR's CharacterIdUserStatistics accordingly.
// Replaces o.R.CharacterIdUserStatistics with related.
// Sets related.R.CharacterIdCharacterR's CharacterIdUserStatistics accordingly.
func (o *CharacterR) SetCharacterIdUserStatistics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserStatistic) error {
	query := "update `UserStatistics` set `CharacterId` = null where `CharacterId` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CharacterIdUserStatistics {
			queries.SetScanner(&rel.CharacterId, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CharacterIdCharacterR = nil
		}
		o.R.CharacterIdUserStatistics = nil
	}

	return o.AddCharacterIdUserStatistics(ctx, exec, insert, related...)
}

// RemoveCharacterIdUserStatistics relationships from objects passed in.
// Removes related items from R.CharacterIdUserStatistics (uses pointer comparison, removal does not keep order)
// Sets related.R.CharacterIdCharacterR.
func (o *CharacterR) RemoveCharacterIdUserStatistics(ctx context.Context, exec boil.ContextExecutor, related ...*UserStatistic) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CharacterId, nil)
		if rel.R != nil {
			rel.R.CharacterIdCharacterR = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("CharacterId")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CharacterIdUserStatistics {
			if rel != ri {
				continue
			}

			ln := len(o.R.CharacterIdUserStatistics)
			if ln > 1 && i < ln-1 {
				o.R.CharacterIdUserStatistics[i] = o.R.CharacterIdUserStatistics[ln-1]
			}
			o.R.CharacterIdUserStatistics = o.R.CharacterIdUserStatistics[:ln-1]
			break
		}
	}

	return nil
}

// CharacterRs retrieves all the records using an executor.
func CharacterRs(mods ...qm.QueryMod) characterRQuery {
	mods = append(mods, qm.From("`CharacterR`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`CharacterR`.*"})
	}

	return characterRQuery{q}
}

// FindCharacterR retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCharacterR(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CharacterR, error) {
	characterRObj := &CharacterR{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `CharacterR` where `Id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, characterRObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from CharacterR")
	}

	if err = characterRObj.doAfterSelectHooks(ctx, exec); err != nil {
		return characterRObj, err
	}

	return characterRObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CharacterR) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CharacterR provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterRColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	characterRInsertCacheMut.RLock()
	cache, cached := characterRInsertCache[key]
	characterRInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			characterRAllColumns,
			characterRColumnsWithDefault,
			characterRColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(characterRType, characterRMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(characterRType, characterRMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `CharacterR` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `CharacterR` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `CharacterR` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, characterRPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into CharacterR")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == characterRMapping["Id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CharacterR")
	}

CacheNoHooks:
	if !cached {
		characterRInsertCacheMut.Lock()
		characterRInsertCache[key] = cache
		characterRInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CharacterR.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CharacterR) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	characterRUpdateCacheMut.RLock()
	cache, cached := characterRUpdateCache[key]
	characterRUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			characterRAllColumns,
			characterRPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update CharacterR, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `CharacterR` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, characterRPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(characterRType, characterRMapping, append(wl, characterRPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update CharacterR row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for CharacterR")
	}

	if !cached {
		characterRUpdateCacheMut.Lock()
		characterRUpdateCache[key] = cache
		characterRUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q characterRQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for CharacterR")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for CharacterR")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CharacterRSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterRPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `CharacterR` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterRPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in characterR slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all characterR")
	}
	return rowsAff, nil
}

var mySQLCharacterRUniqueColumns = []string{
	"Id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CharacterR) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CharacterR provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(characterRColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCharacterRUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	characterRUpsertCacheMut.RLock()
	cache, cached := characterRUpsertCache[key]
	characterRUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			characterRAllColumns,
			characterRColumnsWithDefault,
			characterRColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			characterRAllColumns,
			characterRPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert CharacterR, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`CharacterR`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `CharacterR` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(characterRType, characterRMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(characterRType, characterRMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for CharacterR")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == characterRMapping["Id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(characterRType, characterRMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for CharacterR")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CharacterR")
	}

CacheNoHooks:
	if !cached {
		characterRUpsertCacheMut.Lock()
		characterRUpsertCache[key] = cache
		characterRUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CharacterR record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CharacterR) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CharacterR provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), characterRPrimaryKeyMapping)
	sql := "DELETE FROM `CharacterR` WHERE `Id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from CharacterR")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for CharacterR")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q characterRQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no characterRQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from CharacterR")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CharacterR")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CharacterRSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(characterRBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterRPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `CharacterR` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterRPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from characterR slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CharacterR")
	}

	if len(characterRAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CharacterR) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCharacterR(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CharacterRSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CharacterRSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), characterRPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `CharacterR`.* FROM `CharacterR` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, characterRPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CharacterRSlice")
	}

	*o = slice

	return nil
}

// CharacterRExists checks if the CharacterR row exists.
func CharacterRExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `CharacterR` where `Id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if CharacterR exists")
	}

	return exists, nil
}
